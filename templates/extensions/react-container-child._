<%
const cell = design.MasterCell.find(cell => cell.name === context);
const className = lodash.upperFirst(lodash.camelCase(cell.name));
const tube = args.tube;

if (tube.from.name.endsWith('Component') || tube.from.name.endsWith('Container')) {
    const component = tube.from;
    const componentClassName = lodash.upperFirst(lodash.camelCase(component.name));
    const routes = design.Flow.filter(f => f.name.endsWith('Route') && _.intersection(f.tube, tube.designTubes).length !== 0);
    if (routes.length !== 0) {
        routes.forEach(route => {
            const routeName = route.name === 'DefaultRoute' ? '*' : route.name;
%>
<Route path={'<%=routeName.replace(/Route$/,'')%>'}
    render={(props) => <<%=componentClassName%> {...props} <%=extension('react-tag.*', 'container-child-attributes', args).join(' ')%>/>} />
<%          });
    } else {%>
<<%=componentClassName%> label='<%=tube.name%>'
    <%=extension('react-tag.*', 'container-child-attributes', args).join(' ')%>/>
<%   }
}
%>
